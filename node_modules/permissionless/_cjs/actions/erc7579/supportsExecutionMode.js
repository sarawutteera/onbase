"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.supportsExecutionMode = exports.encodeExecutionMode = void 0;
const viem_1 = require("viem");
const utils_1 = require("../../utils/index.js");
const signUserOperationHashWithECDSA_1 = require("../../utils/signUserOperationHashWithECDSA.js");
function parseCallType(callType) {
    switch (callType) {
        case "call":
            return "0x00";
        case "batchcall":
            return "0x01";
        case "delegatecall":
            return "0xff";
    }
}
function encodeExecutionMode({ type, revertOnError, selector, context }) {
    return (0, viem_1.encodePacked)(["bytes1", "bytes1", "bytes4", "bytes4", "bytes22"], [
        (0, viem_1.toHex)((0, viem_1.toBytes)(parseCallType(type), { size: 1 })),
        (0, viem_1.toHex)((0, viem_1.toBytes)(revertOnError ? "0x01" : "0x00", { size: 1 })),
        (0, viem_1.toHex)((0, viem_1.toBytes)("0x0", { size: 4 })),
        (0, viem_1.toHex)((0, viem_1.toBytes)(selector ?? "0x", { size: 4 })),
        (0, viem_1.toHex)((0, viem_1.toBytes)(context ?? "0x", { size: 22 }))
    ]);
}
exports.encodeExecutionMode = encodeExecutionMode;
async function supportsExecutionMode(client, args) {
    const { account: account_ = client.account, type, revertOnError, selector, context } = args;
    if (!account_) {
        throw new signUserOperationHashWithECDSA_1.AccountOrClientNotFoundError({
            docsPath: "/docs/actions/wallet/sendTransaction"
        });
    }
    const account = (0, utils_1.parseAccount)(account_);
    const publicClient = account.client;
    const encodedMode = encodeExecutionMode({
        type,
        revertOnError,
        selector,
        context
    });
    const abi = [
        {
            name: "supportsExecutionMode",
            type: "function",
            stateMutability: "view",
            inputs: [
                {
                    type: "bytes32",
                    name: "encodedMode"
                }
            ],
            outputs: [
                {
                    type: "bool"
                }
            ]
        }
    ];
    try {
        return await publicClient.readContract({
            abi,
            functionName: "supportsExecutionMode",
            args: [encodedMode],
            address: account.address
        });
    }
    catch (error) {
        if (error instanceof viem_1.ContractFunctionExecutionError) {
            const factory = await account.getFactory();
            const factoryData = await account.getFactoryData();
            const result = await publicClient.call({
                factory: factory,
                factoryData: factoryData,
                to: account.address,
                data: (0, viem_1.encodeFunctionData)({
                    abi,
                    functionName: "supportsExecutionMode",
                    args: [encodedMode]
                })
            });
            if (!result || !result.data) {
                throw new Error("accountId result is empty");
            }
            return (0, viem_1.decodeFunctionResult)({
                abi,
                functionName: "supportsExecutionMode",
                data: result.data
            });
        }
        throw error;
    }
}
exports.supportsExecutionMode = supportsExecutionMode;
//# sourceMappingURL=supportsExecutionMode.js.map