import { type Chain, type Client, type Hex, type Transport } from "viem";
import type { SmartAccount } from "../../accounts/types";
import type { GetAccountParameter, Prettify } from "../../types";
import type { EntryPoint } from "../../types/entrypoint";
export type CallType = "call" | "delegatecall" | "batchcall";
export type ExecutionMode<callType extends CallType> = {
    type: callType;
    revertOnError?: boolean;
    selector?: Hex;
    context?: Hex;
};
export type SupportsExecutionModeParameters<TEntryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TSmartAccount extends SmartAccount<TEntryPoint, string, TTransport, TChain> | undefined = SmartAccount<TEntryPoint, string, TTransport, TChain> | undefined, callType extends CallType = CallType> = GetAccountParameter<TEntryPoint, TTransport, TChain, TSmartAccount> & ExecutionMode<callType>;
export declare function encodeExecutionMode<callType extends CallType>({ type, revertOnError, selector, context }: ExecutionMode<callType>): Hex;
export declare function supportsExecutionMode<TEntryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TSmartAccount extends SmartAccount<TEntryPoint, string, TTransport, TChain> | undefined = SmartAccount<TEntryPoint, string, TTransport, TChain> | undefined>(client: Client<TTransport, TChain, TSmartAccount>, args: Prettify<SupportsExecutionModeParameters<TEntryPoint, TTransport, TChain, TSmartAccount>>): Promise<boolean>;
//# sourceMappingURL=supportsExecutionMode.d.ts.map