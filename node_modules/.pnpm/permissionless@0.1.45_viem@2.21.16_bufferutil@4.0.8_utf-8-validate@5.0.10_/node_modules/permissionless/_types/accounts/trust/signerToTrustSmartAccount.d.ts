import { type Address, type Chain, type Client, type PublicActions, type PublicRpcSchema, type Transport } from "viem";
import { type SmartAccount, type SmartAccountSigner } from "../types";
import type { ENTRYPOINT_ADDRESS_V06_TYPE } from "../../types";
/**
 * Default addresses for Trust Smart Account
 */
export declare const TRUST_ADDRESSES: {
    secp256k1VerificationFacetAddress: Address;
    factoryAddress: Address;
};
export type TrustSmartAccount<entryPoint extends ENTRYPOINT_ADDRESS_V06_TYPE, transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined> = SmartAccount<entryPoint, "TrustSmartAccount", transport, chain>;
export type SignerToTrustSmartAccountParameters<entryPoint extends ENTRYPOINT_ADDRESS_V06_TYPE, TSource extends string = string, TAddress extends Address = Address> = {
    signer: SmartAccountSigner<TSource, TAddress>;
    factoryAddress?: Address;
    entryPoint: entryPoint;
    index?: bigint;
    address?: Address;
    secp256k1VerificationFacetAddress?: Address;
    nonceKey?: bigint;
};
/**
 * @description Creates an Trust Smart Account from a private key.
 *
 * @returns A Private Key Trust Smart Account.
 */
export declare function signerToTrustSmartAccount<entryPoint extends ENTRYPOINT_ADDRESS_V06_TYPE, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TSource extends string = string, TAddress extends Address = Address>(client: Client<TTransport, TChain, undefined, PublicRpcSchema, PublicActions<TTransport, TChain>>, { signer, factoryAddress, entryPoint: entryPointAddress, index, secp256k1VerificationFacetAddress, address, nonceKey }: SignerToTrustSmartAccountParameters<entryPoint, TSource, TAddress>): Promise<TrustSmartAccount<entryPoint, TTransport, TChain>>;
//# sourceMappingURL=signerToTrustSmartAccount.d.ts.map