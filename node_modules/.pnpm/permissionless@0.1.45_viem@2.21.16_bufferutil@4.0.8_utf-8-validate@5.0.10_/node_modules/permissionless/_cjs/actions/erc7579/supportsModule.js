"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.supportsModule = exports.parseModuleTypeId = void 0;
const viem_1 = require("viem");
const utils_1 = require("../../utils/index.js");
const signUserOperationHashWithECDSA_1 = require("../../utils/signUserOperationHashWithECDSA.js");
function parseModuleTypeId(type) {
    switch (type) {
        case "validator":
            return BigInt(1);
        case "executor":
            return BigInt(2);
        case "fallback":
            return BigInt(3);
        case "hook":
            return BigInt(4);
        default:
            throw new Error("Invalid module type");
    }
}
exports.parseModuleTypeId = parseModuleTypeId;
async function supportsModule(client, args) {
    const { account: account_ = client.account } = args;
    if (!account_) {
        throw new signUserOperationHashWithECDSA_1.AccountOrClientNotFoundError({
            docsPath: "/docs/actions/wallet/sendTransaction"
        });
    }
    const account = (0, utils_1.parseAccount)(account_);
    const publicClient = account.client;
    const abi = [
        {
            name: "supportsModule",
            type: "function",
            stateMutability: "view",
            inputs: [
                {
                    type: "uint256",
                    name: "moduleTypeId"
                }
            ],
            outputs: [
                {
                    type: "bool"
                }
            ]
        }
    ];
    try {
        return await publicClient.readContract({
            abi,
            functionName: "supportsModule",
            args: [parseModuleTypeId(args.type)],
            address: account.address
        });
    }
    catch (error) {
        if (error instanceof viem_1.ContractFunctionExecutionError) {
            const factory = await account.getFactory();
            const factoryData = await account.getFactoryData();
            const result = await publicClient.call({
                factory: factory,
                factoryData: factoryData,
                to: account.address,
                data: (0, viem_1.encodeFunctionData)({
                    abi,
                    functionName: "supportsModule",
                    args: [parseModuleTypeId(args.type)]
                })
            });
            if (!result || !result.data) {
                throw new Error("accountId result is empty");
            }
            return (0, viem_1.decodeFunctionResult)({
                abi,
                functionName: "supportsModule",
                data: result.data
            });
        }
        throw error;
    }
}
exports.supportsModule = supportsModule;
//# sourceMappingURL=supportsModule.js.map