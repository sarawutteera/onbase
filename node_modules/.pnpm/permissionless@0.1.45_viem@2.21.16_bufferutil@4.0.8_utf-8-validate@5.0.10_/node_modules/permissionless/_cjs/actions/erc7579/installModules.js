"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installModules = void 0;
const viem_1 = require("viem");
const utils_1 = require("viem/utils");
const utils_2 = require("../../utils/index.js");
const signUserOperationHashWithECDSA_1 = require("../../utils/signUserOperationHashWithECDSA.js");
const sendUserOperation_1 = require("../smartAccount/sendUserOperation.js");
const supportsModule_1 = require("./supportsModule.js");
async function installModules(client, parameters) {
    const { account: account_ = client.account, maxFeePerGas, maxPriorityFeePerGas, nonce, middleware, modules } = parameters;
    if (!account_) {
        throw new signUserOperationHashWithECDSA_1.AccountOrClientNotFoundError({
            docsPath: "/docs/actions/wallet/sendTransaction"
        });
    }
    const account = (0, utils_2.parseAccount)(account_);
    const installModulesCallData = await account.encodeCallData(await Promise.all(modules.map(({ type, address, context }) => ({
        to: account.address,
        value: BigInt(0),
        data: (0, viem_1.encodeFunctionData)({
            abi: [
                {
                    name: "installModule",
                    type: "function",
                    stateMutability: "nonpayable",
                    inputs: [
                        {
                            type: "uint256",
                            name: "moduleTypeId"
                        },
                        {
                            type: "address",
                            name: "module"
                        },
                        {
                            type: "bytes",
                            name: "initData"
                        }
                    ],
                    outputs: []
                }
            ],
            functionName: "installModule",
            args: [
                (0, supportsModule_1.parseModuleTypeId)(type),
                (0, viem_1.getAddress)(address),
                context
            ]
        })
    }))));
    return (0, utils_1.getAction)(client, (sendUserOperation_1.sendUserOperation), "sendUserOperation")({
        userOperation: {
            sender: account.address,
            maxFeePerGas: maxFeePerGas,
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            callData: installModulesCallData,
            nonce: nonce
        },
        account: account,
        middleware
    });
}
exports.installModules = installModules;
//# sourceMappingURL=installModules.js.map