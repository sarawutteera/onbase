import { encodeFunctionData, getAddress } from "viem";
import { getAction } from "viem/utils";
import { parseAccount } from "../../utils/index.js";
import { AccountOrClientNotFoundError } from "../../utils/signUserOperationHashWithECDSA.js";
import { sendUserOperation } from "../smartAccount/sendUserOperation.js";
import { parseModuleTypeId } from "./supportsModule.js";
export async function uninstallModule(client, parameters) {
    const { account: account_ = client.account, maxFeePerGas, maxPriorityFeePerGas, nonce, middleware, address, context } = parameters;
    if (!account_) {
        throw new AccountOrClientNotFoundError({
            docsPath: "/docs/actions/wallet/sendTransaction"
        });
    }
    const account = parseAccount(account_);
    const uninstallModuleCallData = await account.encodeCallData({
        to: account.address,
        value: BigInt(0),
        data: encodeFunctionData({
            abi: [
                {
                    name: "uninstallModule",
                    type: "function",
                    stateMutability: "nonpayable",
                    inputs: [
                        {
                            type: "uint256",
                            name: "moduleTypeId"
                        },
                        {
                            type: "address",
                            name: "module"
                        },
                        {
                            type: "bytes",
                            name: "deInitData"
                        }
                    ],
                    outputs: []
                }
            ],
            functionName: "uninstallModule",
            args: [
                parseModuleTypeId(parameters.type),
                getAddress(address),
                context
            ]
        })
    });
    return getAction(client, (sendUserOperation), "sendUserOperation")({
        userOperation: {
            sender: account.address,
            maxFeePerGas: maxFeePerGas,
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            callData: uninstallModuleCallData,
            nonce: nonce
        },
        account: account,
        middleware
    });
}
//# sourceMappingURL=uninstallModule.js.map