import { ContractFunctionExecutionError, decodeFunctionResult, encodeFunctionData, getAddress } from "viem";
import { parseAccount } from "../../utils/index.js";
import { AccountOrClientNotFoundError } from "../../utils/signUserOperationHashWithECDSA.js";
import { parseModuleTypeId } from "./supportsModule.js";
export async function isModuleInstalled(client, parameters) {
    const { account: account_ = client.account, address, context } = parameters;
    if (!account_) {
        throw new AccountOrClientNotFoundError({
            docsPath: "/docs/actions/wallet/sendTransaction"
        });
    }
    const account = parseAccount(account_);
    const publicClient = account.client;
    const abi = [
        {
            name: "isModuleInstalled",
            type: "function",
            stateMutability: "view",
            inputs: [
                {
                    type: "uint256",
                    name: "moduleTypeId"
                },
                {
                    type: "address",
                    name: "module"
                },
                {
                    type: "bytes",
                    name: "additionalContext"
                }
            ],
            outputs: [
                {
                    type: "bool"
                }
            ]
        }
    ];
    try {
        return await publicClient.readContract({
            abi,
            functionName: "isModuleInstalled",
            args: [
                parseModuleTypeId(parameters.type),
                getAddress(address),
                context
            ],
            address: account.address
        });
    }
    catch (error) {
        if (error instanceof ContractFunctionExecutionError) {
            const factory = await account.getFactory();
            const factoryData = await account.getFactoryData();
            const result = await publicClient.call({
                factory: factory,
                factoryData: factoryData,
                to: account.address,
                data: encodeFunctionData({
                    abi,
                    functionName: "isModuleInstalled",
                    args: [
                        parseModuleTypeId(parameters.type),
                        getAddress(address),
                        context
                    ]
                })
            });
            if (!result || !result.data) {
                throw new Error("accountId result is empty");
            }
            return decodeFunctionResult({
                abi,
                functionName: "isModuleInstalled",
                data: result.data
            });
        }
        throw error;
    }
}
//# sourceMappingURL=isModuleInstalled.js.map