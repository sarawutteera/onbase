import { OpenFramesUntrustedData, OpenFramesTrustedData, RequestValidator, OpenFramesRequest, ValidationResponse } from '@open-frames/types';
import { frames, signature, publicKey } from '@xmtp/proto';

type UntrustedData = OpenFramesUntrustedData & {
    walletAddress: string;
    opaqueConversationIdentifier: string;
};
type XmtpOpenFramesRequest = {
    clientProtocol: `xmtp@${string}`;
    untrustedData: UntrustedData;
    trustedData: OpenFramesTrustedData;
};
type XmtpValidationResponse = {
    actionBody: frames.FrameActionBody;
    verifiedWalletAddress: string;
};

declare class XmtpValidator implements RequestValidator<XmtpOpenFramesRequest, XmtpValidationResponse, "xmtp"> {
    readonly protocolIdentifier = "xmtp";
    readonly minProtocolVersionDate = "2024-02-09";
    minProtocolVersion(): string;
    isSupported(payload: OpenFramesRequest): payload is XmtpOpenFramesRequest;
    validate(payload: XmtpOpenFramesRequest): Promise<ValidationResponse<XmtpValidationResponse, typeof this.protocolIdentifier>>;
}

declare function validateFramesPost(data: XmtpOpenFramesRequest): Promise<XmtpValidationResponse>;
declare function deserializeProtoMessage(messageBytes: Uint8Array): {
    actionBody: frames.FrameActionBody;
    actionBodyBytes: Uint8Array;
    signature: signature.Signature;
    signedPublicKeyBundle: publicKey.SignedPublicKeyBundle;
};

export { type UntrustedData, type XmtpOpenFramesRequest, type XmtpValidationResponse, XmtpValidator, deserializeProtoMessage, validateFramesPost };
