import type { Address } from 'viem';
import type { Token } from '../../token';
export declare function useSwapBalances({ address, fromToken, toToken, }: {
    address?: Address;
    fromToken?: Token;
    toToken?: Token;
}): {
    fromBalanceString: string | undefined;
    fromTokenBalanceError: import("..").SwapError | undefined;
    fromTokenResponse: {
        data: {
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        };
        error: import("viem").GetBalanceErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: true;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: {
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        };
        error: null;
        isError: false;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: true;
        status: "success";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: undefined;
        error: import("viem").GetBalanceErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: true;
        isRefetchError: false;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: undefined;
        error: null;
        isError: false;
        isPending: true;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "pending";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isLoading: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: unknown;
        error: import("viem").ReadContractErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: true;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: unknown;
        error: null;
        isError: false;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: true;
        status: "success";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: undefined;
        error: import("viem").ReadContractErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: true;
        isRefetchError: false;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: undefined;
        error: null;
        isError: false;
        isPending: true;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "pending";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isLoading: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | undefined;
    toBalanceString: string | undefined;
    toTokenBalanceError: import("..").SwapError | undefined;
    toTokenResponse: {
        data: {
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        };
        error: import("viem").GetBalanceErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: true;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: {
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        };
        error: null;
        isError: false;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: true;
        status: "success";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: undefined;
        error: import("viem").GetBalanceErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: true;
        isRefetchError: false;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: undefined;
        error: null;
        isError: false;
        isPending: true;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "pending";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").GetBalanceErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isLoading: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<{
            decimals: number;
            formatted: string;
            symbol: string;
            value: bigint;
        }, import("viem").GetBalanceErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: unknown;
        error: import("viem").ReadContractErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: true;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: unknown;
        error: null;
        isError: false;
        isPending: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: true;
        status: "success";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: undefined;
        error: import("viem").ReadContractErrorType;
        isError: true;
        isPending: false;
        isLoading: false;
        isLoadingError: true;
        isRefetchError: false;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | {
        data: undefined;
        error: null;
        isError: false;
        isPending: true;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "pending";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        failureReason: import("viem").ReadContractErrorType | null;
        errorUpdateCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isLoading: boolean;
        isInitialLoading: boolean;
        isPaused: boolean;
        isPlaceholderData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: (options?: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").ad | undefined) => Promise<import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").at<unknown, import("viem").ReadContractErrorType>>;
        fetchStatus: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").al;
        queryKey: import("@tanstack/query-core/build/legacy/hydration-ByKLEQMr").z;
    } | undefined;
};
//# sourceMappingURL=useSwapBalances.d.ts.map