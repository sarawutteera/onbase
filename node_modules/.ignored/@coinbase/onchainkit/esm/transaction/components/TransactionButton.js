import { useMemo, useCallback } from 'react';
import { useAccount, useChainId } from 'wagmi';
import { useShowCallsStatus } from 'wagmi/experimental';
import { Spinner } from '../../internal/components/Spinner.js';
import { getChainExplorer } from '../../network/getChainExplorer.js';
import { cn, pressable, text, color } from '../../styles/theme.js';
import { isSpinnerDisplayed } from '../utils/isSpinnerDisplayed.js';
import { useTransactionContext } from './TransactionProvider.js';
import { jsx } from 'react/jsx-runtime';
function TransactionButton({
  className,
  disabled = false,
  text: buttonText = 'Transact'
}) {
  const _useTransactionContex = useTransactionContext(),
    chainId = _useTransactionContex.chainId,
    errorMessage = _useTransactionContex.errorMessage,
    isLoading = _useTransactionContex.isLoading,
    lifecycleStatus = _useTransactionContex.lifecycleStatus,
    onSubmit = _useTransactionContex.onSubmit,
    receipt = _useTransactionContex.receipt,
    transactions = _useTransactionContex.transactions,
    transactionHash = _useTransactionContex.transactionHash,
    transactionId = _useTransactionContex.transactionId;
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const accountChainId = chainId ?? useChainId();
  const _useShowCallsStatus = useShowCallsStatus(),
    showCallsStatus = _useShowCallsStatus.showCallsStatus;
  const isInProgress = lifecycleStatus.statusName === 'transactionPending' || isLoading;
  const isMissingProps = !transactions || !address;
  const isWaitingForReceipt = !!transactionId || !!transactionHash;
  const isDisabled = !receipt && (isInProgress || isMissingProps || isWaitingForReceipt || disabled);
  const displaySpinner = isSpinnerDisplayed({
    errorMessage,
    hasReceipt: !!receipt,
    isLoading,
    lifecycleStatus,
    transactionHash,
    transactionId
  });
  const buttonContent = useMemo(() => {
    // txn successful
    if (receipt) {
      return 'View transaction';
    }
    if (errorMessage) {
      return 'Try again';
    }
    return buttonText;
  }, [buttonText, errorMessage, receipt]);
  const handleSubmit = useCallback(() => {
    // SW will have txn id so open in wallet
    if (receipt && transactionId) {
      showCallsStatus({
        id: transactionId
      });
      // EOA will not have txn id so open in explorer
    } else if (receipt) {
      const chainExplorer = getChainExplorer(accountChainId);
      window.open(`${chainExplorer}/tx/${transactionHash}`, '_blank', 'noopener,noreferrer');
    } else {
      // if no receipt, submit txn
      onSubmit();
    }
  }, [accountChainId, onSubmit, receipt, showCallsStatus, transactionHash, transactionId]);
  return /*#__PURE__*/jsx("button", {
    className: cn(pressable.primary, 'w-full rounded-xl', 'px-4 py-3 font-medium text-base text-white leading-6', isDisabled && pressable.disabled, text.headline, className),
    onClick: handleSubmit,
    type: "button",
    disabled: isDisabled,
    children: displaySpinner ? /*#__PURE__*/jsx(Spinner, {}) : /*#__PURE__*/jsx("span", {
      className: cn(text.headline, color.inverse, 'flex justify-center'),
      children: buttonContent
    })
  });
}
export { TransactionButton };
//# sourceMappingURL=TransactionButton.js.map
